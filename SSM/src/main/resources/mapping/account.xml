<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.AccountDao" >

    <resultMap id="BaseResultMap" type="model.Account" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="nickname" property="nickname" jdbcType="VARCHAR" />
        <result column="password" property="password" jdbcType="VARCHAR" />
        <result column="salt" property="salt" jdbcType="VARCHAR" />
        <result column="sex" property="sex" jdbcType="BIT" />
        <result column="status" property="status" jdbcType="BIT" />
        <result column="phone" property="phone" jdbcType="VARCHAR" />
    </resultMap>

    <sql id="Base_Column_List" >
        id, name, nickname, password, salt, sex, status, phone
    </sql>



    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from account
        where id = #{id,jdbcType=INTEGER}
    </select>


    <select id="selectByCondition" resultMap="BaseResultMap"  >
        select
        <bind name="pattern" value="'%' + nickname + '%'" />
        <include refid="Base_Column_List" />
        from account a
        --  where语句,如果内容为空,则不会出现where关键字,导致查询失败
        <where>
            <if test="name != null">
                a.id = #{id}
            </if>
            <if test="nickname != null">
                a.nickname LIKE #{pattern}
            </if>
            <if test="sex != null">
                a.sex = #{sex}
            </if>
            <if test="status != null">
                a.status = #{status}
            </if>
            <if test="phone != null">
                a.phone = #{phone}
            </if>
        </where>
        where id = #{id,jdbcType=INTEGER}
    </select>


    <select id="selectByOpt" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from account a
        WHERE
        --  choose 和 when相当于java的switch
         <choose>
            <when test="opt == 0">
                a.status = #{status}
            </when>
            <when test="opt == 1">
                a.sex = #{sex}
            </when>
            <otherwise>
                a.nickname = #{nickname}
            </otherwise>
        </choose>
    </select>


    <!--去掉where的第一个and或者or,去掉where最后一个逗号-->
    <select id="selectByName" resultMap="BaseResultMap" >
        select
        <include refid="Base_Column_List" />
        from account a

        <trim prefix="where" suffixOverrides=","  prefixOverrides="AND |OR ">
            <if test="name != null and name.length()>0">
                AND name=#{name} ,
            </if>
            <if test="nickname != null and nickname.length()>0">
                AND nickname=#{nickname} ,
            </if>
        </trim>
    </select>



    <select id="selectByIdIn" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from account a
        where a.id in
--         index是当前迭代的次数，item的值是本次迭代获取的元素。当使用字典（或者Map.Entry对象的集合）时，index是键，item是值。
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>


    <delete id="deleteById">
        delete from Account where id = #{id}
    </delete>


    <!--设置id为自增张-->
    <insert id="insert"  useGeneratedKeys="true"  keyProperty="id">
        insert into Account (id,username,password,email,bio)
        values (#{id},#{username},#{password},#{email},#{bio})
    </insert>


    <!--传入Account集合或者数组-->
    <insert id="insertAuthor" useGeneratedKeys="true"
            keyProperty="id">
        insert into Author (username, password, email, bio) values
        <foreach item="item" collection="list" separator=",">
            (#{item.username}, #{item.password}, #{item.email}, #{item.bio})
        </foreach>
    </insert>

    <update id="update">
        update Account
        set
        username = #{username},
        password = #{password},
        email = #{email},
        bio = #{bio}
        where
        id = #{id}
    </update>





</mapper>